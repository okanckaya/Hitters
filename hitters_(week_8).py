# -*- coding: utf-8 -*-
"""Hitters (Week 8).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J9CO5KMtId0xAFaOfN4DB65erJu08sqj
"""

import numpy as np
import pandas as pd

from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor

import math

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import explained_variance_score
from sklearn.metrics import r2_score

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.pyplot import figure

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split

from google.colab import drive 
drive.mount('/content/gdrive')

df = pd.read_csv('gdrive/My Drive/VBO/Hafta 8/Ders Notları/hitters.csv', error_bad_lines=False)
df

"""
*   AtBat: 1986-1987 sezonunda bir beyzbol sopası ile topa yapılan vuruş sayısı
*   Hits: 1986-1987 sezonundaki isabet sayısı
*   HmRun: 1986-1987 sezonundaki en değerli vuruş sayısı
*   Runs: 1986-1987 sezonunda takımına kazandırdığı sayı
*   RBI: Bir vurucunun vuruş yaptıgında koşu yaptırdığı oyuncu sayısı
*   Walks: Karşı oyuncuya yaptırılan hata sayısı
*   Years: Oyuncunun major liginde oynama süresi (sene)
*   CAtBat: Oyuncunun kariyeri boyunca topa vurma sayısı
*   CHits: Oyuncunun kariyeri boyunca yaptığı isabetli vuruş sayısı
*   CHmRun: Oyucunun kariyeri boyunca yaptığı en değerli sayısı
*   CRuns: Oyuncunun kariyeri boyunca takımına kazandırdığı sayı
*   CRBI: Oyuncunun kariyeri boyunca koşu yaptırdırdığı oyuncu sayısı
*   CWalks: Oyuncun kariyeri boyunca karşı oyuncuya yaptırdığı hata sayısı
*   League: Oyuncunun sezon sonuna kadar oynadığı ligi gösteren A ve N seviyelerine sahip bir faktör
*   Division: 1986 sonunda oyuncunun oynadığı pozisyonu gösteren E ve W seviyelerine sahip bir faktör
*   PutOuts: Oyun icinde takım arkadaşınla yardımlaşma
*   Assits: 1986-1987 sezonunda oyuncunun yaptığı asist sayısı
*   Errors: 1986-1987 sezonundaki oyuncunun hata sayısı
*   Salary: Oyuncunun 1986-1987 sezonunda aldığı maaş(bin uzerinden)
*   NewLeague: 1987 sezonunun başında oyuncunun ligini gösteren A ve N seviyelerine sahip bir faktör"""

df_ = df.copy()

df_.dtypes

# Yeni Değişkenlerin Elde Edilmesi

df_["HitRate"] = df_["AtBat"] / df_["Hits"]
df_["CHitRate"] = df_["CAtBat"] / df_["CHits"]

df_.describe().T

value = df_.isnull().sum()
print(value)

# Salary'nin nan olduğu satırları tamamen çıkartmak yerine bu satırlar test verisi olarak seçilebilir.
# Train-test split ile cross validation yapılıp sonuçları olmayan bu veriler için de tahminler geliştirilebilir herhangi bir hata metriği vs olmadan yalnızca sonuçları yazdırarak.
df_na_rows = df_[df_['Salary'].isna()]
df_na_rows.describe().T

df_["Salary"].describe()
sns.distplot(df_.Salary)
plt.show()

sns.boxplot(df_["Salary"])
plt.show()

def grab_col_names(dataframe, cat_th=10, car_th=20):

    # cat_cols, cat_but_car
    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == "O"]

    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and
                   dataframe[col].dtypes != "O"]

    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and
                   dataframe[col].dtypes == "O"]

    cat_cols = cat_cols + num_but_cat

    cat_cols = [col for col in cat_cols if col not in cat_but_car]

    # num_cols
    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != "O"]

    num_cols = [col for col in num_cols if col not in num_but_cat]

    print(f"Observations: {dataframe.shape[0]}")
    print(f"Variables: {dataframe.shape[1]}")
    print(f'cat_cols: {len(cat_cols)}')
    print(f'num_cols: {len(num_cols)}')
    print(f'cat_but_car: {len(cat_but_car)}')
    print(f'num_but_cat: {len(num_but_cat)}')

    return cat_cols, num_cols, cat_but_car

cat_cols, num_cols, cat_but_car = grab_col_names(df_)

def rare_analyser(dataframe, target, cat_cols):
    for col in cat_cols:
        print(col, ":", len(dataframe[col].value_counts()))
        print(pd.DataFrame({"COUNT": dataframe[col].value_counts(),
                            "RATIO": dataframe[col].value_counts() / len(dataframe),
                            "TARGET_MEAN": dataframe.groupby(col)[target].mean()}), end="\n\n\n")

rare_analyser(df_, "Salary", cat_cols)

def num_summary(dataframe, numerical_col, plot=False):
    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]

    print(dataframe[numerical_col].describe(quantiles).T)

    if plot:
        dataframe[numerical_col].hist(bins=20)
        plt.xlabel(numerical_col)
        plt.title(numerical_col)
        plt.show()

def outlier_thresholds(dataframe, col_name, q1=0.1, q3=0.9):
    quartile1 = dataframe[col_name].quantile(q1)
    quartile3 = dataframe[col_name].quantile(q3)
    interquantile_range = quartile3 - quartile1
    up_limit = quartile3 + 1.5 * interquantile_range
    low_limit = quartile1 - 1.5 * interquantile_range
    return low_limit, up_limit

def check_outlier(dataframe, col_name):
    low_limit, up_limit = outlier_thresholds(dataframe, col_name)
    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):
        return True
    else:
        return False

for col in num_cols:
    print(col, check_outlier(df_, col))

df_.isnull().sum()

df_.dropna(inplace=True)
df_ = df_.reset_index(drop=True)
df_2 = df_.copy()

# Label Encoding:

labelencoder = LabelEncoder()
df_['League'] = labelencoder.fit_transform(df_['League'].values)
df_['Division'] = labelencoder.fit_transform(df_['Division'].values)
df_['NewLeague'] = labelencoder.fit_transform(df_['NewLeague'].values)

df_2['League'] = labelencoder.fit_transform(df_2['League'].values)
df_2['Division'] = labelencoder.fit_transform(df_2['Division'].values)
df_2['NewLeague'] = labelencoder.fit_transform(df_2['NewLeague'].values)

def show_correlations(df, show_chart = True):
    fig = plt.figure(figsize = (25,15))
    corr = df.corr()
    if show_chart == True:
        sns.heatmap(corr, 
                    xticklabels=corr.columns.values,
                    yticklabels=corr.columns.values,
                    annot=True)
    return corr

show_correlations(df_)

def remove_outlier(dataframe, col_name):
    low_limit, up_limit = outlier_thresholds(dataframe, col_name)
    df_without_outliers = dataframe[~((dataframe[col_name] < low_limit) | (dataframe[col_name] > up_limit))]
    return df_without_outliers

df_without_outliers = remove_outlier(df_2, "CHits")
df_without_outliers.dropna(inplace=True)
df_without_outliers = df_without_outliers.reset_index(drop=True)

df_without_outliers

print(df_without_outliers.columns)
print(df_.columns)

################# With Outliers #################

# All variables:
X_1 = df_.iloc[:, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ,13, 15, 16, 17, 19, 20, 21]].values
y_1 = df_.iloc[:, 18].values

# Deleting variables shows high correlation with each other: catbar,, cruns
X_2 = df_.iloc[:, [2, 3, 4, 5, 6, 10 ,13, 15, 16, 17, 19, 20, 21]].values
y_2 = df_.iloc[:, 18].values

################# Without Outliers #################

# All variables:
X_3 = df_without_outliers.iloc[:, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ,13, 15, 16, 17, 19, 20, 21]].values
y_3 = df_without_outliers.iloc[:, 18].values

# Deleting variables shows high correlation with each other: catbar,, cruns
X_4 = df_without_outliers.iloc[:, [2, 3, 4, 5, 6, 10 ,13, 15, 16, 17, 19, 20, 21]].values
y_4 = df_without_outliers.iloc[:, 18].values

scaler = StandardScaler()

X_1 = scaler.fit_transform(X_1)
X_2 = scaler.fit_transform(X_2)
X_3 = scaler.fit_transform(X_3)
X_4 = scaler.fit_transform(X_4)

# Splitting dataset:

X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X_1, y_1, test_size=0.3)
X_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(X_2, y_2, test_size=0.3)
X_train_3, X_test_3, y_train_3, y_test_3 = train_test_split(X_3, y_3, test_size=0.3)
X_train_4, X_test_4, y_train_4, y_test_4 = train_test_split(X_4, y_4, test_size=0.3)

# Since Mean Absolute Percentage Error (MAPE) is available with the new version (0.24) of sklearn and there is an error in importing the new version to Colab, the related error metric is defined as a function:

def mape(y_true, y_pred): 
    #y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

# The distribution of the actual values and the predictions made by the algorithms is intended to be shown not only with numerical error metrics, but also with visual graphics:

def predVisualization(test_pred,y_test):
  x_ax = range(len(test_pred))
  figure(figsize=(50, 10), dpi=80)
  plt.scatter(x_ax, y_test, lw=6, color="blue", label="original")
  plt.scatter(x_ax, test_pred, lw=4, color="red", label="predicted_rtc")
  plt.legend()
  plt.style.use('default')
  plt.show()

# Differnce between :

def errorVisualization(test_pred,y_test):
  diffs = abs(test_pred-y_test)
  x_ax = range(len(test_pred))
  figure(figsize=(50, 10), dpi=80)
  plt.style.use('default')
  plt.plot(x_ax, test_pred-y_test, lw=6, color="blue", label="difference")
  plt.legend()
  plt.show()

def LinReg(X_train, y_train, X_test, y_test):
  lr = LinearRegression()
  model = lr.fit(X_train, y_train)
  train_preds = model.predict(X_train)
  test_preds = model.predict(X_test)

  # Error Metrics
  mae_train = mean_absolute_error(y_train, train_preds)
  mae_test = mean_absolute_error(y_test, test_preds)
  print('MAE Train: ', mae_train)
  print('MAE Test: ', mae_test)

  mse_train = mean_squared_error(y_train, train_preds)
  mse_test = mean_squared_error(y_test, test_preds)
  print('MSE Train: ', mse_train)
  print('MSE Test: ', mse_test)

  rmse_train = mean_squared_error(y_train, train_preds, squared=False)
  rmse_test = mean_squared_error(y_test, test_preds, squared=False)
  print('RMSE Train: ', rmse_train)
  print('RMSE Test: ', rmse_test)

  r2_train = r2_score(y_train, train_preds)
  r2_test = r2_score(y_test, test_preds)
  print('R2 Train: ', r2_train)
  print('R2 Test: ', r2_test)

  mape_train = mape(y_train, train_preds)
  mape_test = mape(y_test, test_preds)
  print('Mape Train: ', mape_train)
  print('Mape Test: ', mape_test)

  explained_variance_train = explained_variance_score(y_train, train_preds)
  explained_variance_test = explained_variance_score(y_test, test_preds)
  print('Explanied Variance Score Train: ', explained_variance_train)
  print('Explanied Variance Score Test: ', explained_variance_test)

  CoV_train = rmse_train/np.mean(y_train)
  CoV_test = rmse_test/np.mean(y_test)
  print('CoV Train: ', CoV_train)
  print('CoV Test: ', CoV_test)

  errorVisualization(train_preds, y_train)
  errorVisualization(test_preds, y_test)

  predVisualization(train_preds,y_train)
  predVisualization(test_preds,y_test)

  return mae_train, mae_test, mse_train, mse_test, rmse_train, rmse_test, r2_train, r2_test, mape_train, mape_test, explained_variance_train, explained_variance_test, CoV_train, CoV_test

mae_train_linreg_1, mae_test_linreg_1, mse_train_linreg_1, mse_test_linreg_1, rmse_train_linreg_1, rmse_test_linreg_1, r2_train_linreg_1, r2_test_linreg_1, mape_train_linreg_1, mape_test_linreg_1, explained_variance_train_linreg_1, explained_variance_test_linreg_1, CoV_train_linreg_1, CoV_test_linreg_1 = LinReg(X_train_1, y_train_1, X_test_1, y_test_1)

mae_train_linreg_2, mae_test_linreg_2, mse_train_linreg_2, mse_test_linreg_2, rmse_train_linreg_2, rmse_test_linreg_2, r2_train_linreg_2, r2_test_linreg_2, mape_train_linreg_2, mape_test_linreg_2, explained_variance_train_linreg_2, explained_variance_test_linreg_2, CoV_train_linreg_2, CoV_test_linreg_2 = LinReg(X_train_2, y_train_2, X_test_2, y_test_2)

mae_train_linreg_3, mae_test_linreg_3, mse_train_linreg_3, mse_test_linreg_3, rmse_train_linreg_3, rmse_test_linreg_3, r2_train_linreg_3, r2_test_linreg_3, mape_train_linreg_3, mape_test_linreg_3, explained_variance_train_linreg_3, explained_variance_test_linreg_3, CoV_train_linreg_3, CoV_test_linreg_3 = LinReg(X_train_3, y_train_3, X_test_3, y_test_3)

mae_train_linreg_4, mae_test_linreg_4, mse_train_linreg_4, mse_test_linreg_4, rmse_train_linreg_4, rmse_test_linreg_4, r2_train_linreg_4, r2_test_linreg_4, mape_train_linreg_4, mape_test_linreg_4, explained_variance_train_linreg_4, explained_variance_test_linreg_4, CoV_train_linreg_4, CoV_test_linreg_4 = LinReg(X_train_4, y_train_4, X_test_4, y_test_4)

parameters_xgb = {
        'n_estimators': [100, 200, 300, 400, 500],
        'subsample': [0, 0.25, 0.4, 0.5, 1], 
        'gamma' : [0, 1, 2, 3, 4, 5, 6],
        'max_depth': [3, 4, 5, 6, 7], 
        'learning_rate': [0.001, 0.005, 0.01, 0.05, 0.1, 0.25],
        }

def XGB(X_train, y_train, X_test, y_test):
  xgboost = XGBRegressor(objective='reg:squarederror')
  xgboost_cv = GridSearchCV(xgboost, parameters_xgb, cv = 4, verbose = 3)
  xgboost_cv.fit(X_train, y_train)
  best = xgboost_cv.best_params_
  best_values = best.values()
  best_values_list = list(best_values)
  xgboost = XGBRegressor(gamma = best_values_list[0],
                         learning_rate = best_values_list[1],
                         max_depth = best_values_list[2],
                         n_estimators = best_values_list[3],
                         subsample = best_values_list[4])
  xgb_tuned =  xgboost.fit(X_train, y_train)  

  train_preds = xgb_tuned.predict(X_train)
  test_preds = xgb_tuned.predict(X_test)

  #XGB Metrics:
  mae_train = mean_absolute_error(y_train, train_preds)
  mae_test = mean_absolute_error(y_test, test_preds)
  print('MAE Train: ', mae_train)
  print('MAE Test: ',mae_test)

  mse_train = mean_squared_error(y_train, train_preds)
  mse_test = mean_squared_error(y_test, test_preds)
  print('MSE Train: ', mse_train)
  print('MSE Test: ', mse_test)

  rmse_train = mean_squared_error(y_train, train_preds, squared=False)
  rmse_test = mean_squared_error(y_test, test_preds, squared=False)
  print('RMSE Train: ', rmse_train)
  print('RMSE Test: ', rmse_test)

  r2_train = r2_score(y_train, train_preds)
  r2_test = r2_score(y_test, test_preds)
  print('R2 Train: ', r2_train)
  print('R2 Test: ', r2_test)

  mape_train = mape(y_train, train_preds)
  mape_test = mape(y_test, test_preds)
  print('Mape Train: ', mape_train)
  print('Mape Test: ', mape_test)

  explained_variance_train = explained_variance_score(y_train, train_preds)
  explained_variance_test = explained_variance_score(y_test, test_preds)
  print('Explanied Variance Score Train: ', explained_variance_train)
  print('Explanied Variance Score Test: ', explained_variance_test)

  CoV_train = rmse_test/np.mean(y_train)
  CoV_test = rmse_test/np.mean(y_test)
  print('CoV Train: ', CoV_train)
  print('CoV Test: ', CoV_test)

  errorVisualization(test_preds, y_test)
  errorVisualization(train_preds, y_train)

  predVisualization(test_preds,y_test)
  predVisualization(train_preds,y_train)

  return mae_train, mae_test, mse_train, mse_test, rmse_train, rmse_test, r2_train, r2_test, mape_train, mape_test, explained_variance_train, explained_variance_test, CoV_train, CoV_test

mae_train_xgb_1, mae_test_xgb_1, mse_train_xgb_1, mse_test_xgb_1, rmse_train_xgb_1, rmse_test_xgb_1, r2_train_xgb_1, r2_test_xgb_1, mape_train_xgb_1, mape_test_xgb_1, explained_variance__train_xgb_1, explained_variance__test_xgb_1, CoV_train_xgb_1, CoV_test_xgb_1 = XGB(X_train_1, y_train_1, X_test_1, y_test_1)

mae_train_xgb_2, mae_test_xgb_2, mse_train_xgb_2, mse_test_xgb_2, rmse_train_xgb_2, rmse_test_xgb_2, r2_train_xgb_2, r2_test_xgb_2, mape_train_xgb_2, mape_test_xgb_2, explained_variance__train_xgb_2, explained_variance__test_xgb_2, CoV_train_xgb_2, CoV_test_xgb_2 = XGB(X_train_2, y_train_2, X_test_2, y_test_2)

mae_train_xgb_3, mae_test_xgb_3, mse_train_xgb_3, mse_test_xgb_3, rmse_train_xgb_3, rmse_test_xgb_3, r2_train_xgb_3, r2_test_xgb_3, mape_train_xgb_3, mape_test_xgb_3, explained_variance__train_xgb_3, explained_variance__test_xgb_3, CoV_train_xgb_3, CoV_test_xgb_3 = XGB(X_train_3, y_train_3, X_test_3, y_test_3)

mae_train_xgb_4, mae_test_xgb_4, mse_train_xgb_4, mse_test_xgb_4, rmse_train_xgb_4, rmse_test_xgb_4, r2_train_xgb_4, r2_test_xgb_4, mape_train_xgb_4, mape_test_xgb_4, explained_variance__train_xgb_4, explained_variance__test_xgb_4, CoV_train_xgb_4, CoV_test_xgb_4 = XGB(X_train_4, y_train_4, X_test_4, y_test_4)

parameters_random_forest = {
        'n_estimators': [50, 100, 200, 300, 400, 500],
        'max_depth': [3, 4, 5], 
        'verbose': [0, 1, 2, 3, 4]
        }

def RFR(X_train, y_train, X_test, y_test):
  random_forest = RandomForestRegressor()
  random_forest_cv = GridSearchCV(random_forest, parameters_random_forest, cv = 5)
  random_forest_cv.fit(X_train, y_train)
  best = random_forest_cv.best_params_
  best_values = best.values()
  best_values_list = list(best_values)
  random_forest = RandomForestRegressor(n_estimators = best_values_list[0],
                                        max_depth = best_values_list[1],
                                        verbose = best_values_list[2])
  rfr_tuned =  random_forest.fit(X_train, y_train)  

  train_preds = rfr_tuned.predict(X_train)
  test_preds = rfr_tuned.predict(X_test)

  #Error Metrics:
  mae_train = mean_absolute_error(y_train, train_preds)
  mae_test = mean_absolute_error(y_test, test_preds)
  print('MAE Train: ', mae_train)
  print('MAE Test: ',mae_test)

  mse_train = mean_squared_error(y_train, train_preds)
  mse_test = mean_squared_error(y_test, test_preds)
  print('MSE Train: ', mse_train)
  print('MSE Test: ',mse_test)

  rmse_train = mean_squared_error(y_train, train_preds, squared=False)
  rmse_test = mean_squared_error(y_test, test_preds, squared=False)
  print('RMSE Train: ', rmse_train)
  print('RMSE Test: ',rmse_test)

  r2_train = r2_score(y_train, train_preds)
  r2_test = r2_score(y_test, test_preds)
  print('R2 Train: ', r2_train)
  print('R2 Test: ',r2_test)

  mape_train = mape(y_train, train_preds)
  mape_test = mape(y_test, test_preds)
  print('Mape Train: ', mape_train)
  print('Mape Test: ',mape_test)

  explained_variance_train = explained_variance_score(y_train, train_preds)
  explained_variance_test = explained_variance_score(y_test, test_preds)
  print('Explanied Variance Score Train: ', explained_variance_train)
  print('Explanied Variance Score Test: ',explained_variance_test)

  CoV_train = rmse_test/np.mean(y_train)
  CoV_test = rmse_test/np.mean(y_test)
  print('CoV Train: ', CoV_train)
  print('CoV Test: ', CoV_test)

  errorVisualization(test_preds, y_test)
  errorVisualization(train_preds, y_train)

  predVisualization(test_preds,y_test)
  predVisualization(train_preds,y_train)

  return mae_train, mae_test, mse_train, mse_test, rmse_train, rmse_test, r2_train, r2_test, mape_train, mape_test, explained_variance_train, explained_variance_test, CoV_train, CoV_test

mae_train_rfr_1, mae_test_rfr_1, mse_train_rfr_1, mse_test_rfr_1, rmse_train_rfr_1, rmse_test_rfr_1, r2_train_rfr_1, r2_test_rfr_1, mape_train_rfr_1, mape_test_rfr_1, explained_variance_train_rfr_1, explained_variance_test_rfr_1, CoV_train_rfr_1, CoV_test_rfr_1 = RFR(X_train_1, y_train_1, X_test_1, y_test_1)

mae_train_rfr_2, mae_test_rfr_2, mse_train_rfr_2, mse_test_rfr_2, rmse_train_rfr_2, rmse_test_rfr_2, r2_train_rfr_2, r2_test_rfr_2, mape_train_rfr_2, mape_test_rfr_2, explained_variance_train_rfr_2, explained_variance_test_rfr_2, CoV_train_rfr_2, CoV_test_rfr_2 = RFR(X_train_2, y_train_2, X_test_2, y_test_2)

mae_train_rfr_3, mae_test_rfr_3, mse_train_rfr_3, mse_test_rfr_3, rmse_train_rfr_3, rmse_test_rfr_3, r2_train_rfr_3, r2_test_rfr_3, mape_train_rfr_3, mape_test_rfr_3, explained_variance_train_rfr_3, explained_variance_test_rfr_3, CoV_train_rfr_3, CoV_test_rfr_3 = RFR(X_train_3, y_train_3, X_test_3, y_test_3)

mae_train_rfr_4, mae_test_rfr_4, mse_train_rfr_4, mse_test_rfr_4, rmse_train_rfr_4, rmse_test_rfr_4, r2_train_rfr_4, r2_test_rfr_4, mape_train_rfr_4, mape_test_rfr_4, explained_variance_train_rfr_4, explained_variance_test_rfr_4, CoV_train_rfr_4, CoV_test_rfr_4 = RFR(X_train_4, y_train_4, X_test_4, y_test_4)

def KNN(X_train, y_train, X_test, y_test):
  estimator_knn = KNeighborsRegressor(algorithm='auto')
  parameters_knn = {'n_neighbors': [1, 3, 5, 10],
                    'leaf_size': [20, 30, 40, 50]}
                    
  # with GridSearch
  grid_search_knn = GridSearchCV(estimator_knn, parameters_knn, cv = 4)
  
  knn=grid_search_knn.fit(X_train, y_train)

  train_preds = knn.predict(X_train)
  test_preds = knn.predict(X_test)

  #Error Metrics:
  mae_train = mean_absolute_error(y_train, train_preds)
  mae_test = mean_absolute_error(y_test, test_preds)
  print('MAE Train: ', mae_train)
  print('MAE Test: ',mae_test)

  mse_train = mean_squared_error(y_train, train_preds)
  mse_test = mean_squared_error(y_test, test_preds)
  print('MSE Train: ', mse_train)
  print('MSE Test: ', mse_test)

  rmse_train = mean_squared_error(y_train, train_preds, squared=False)
  rmse_test = mean_squared_error(y_test, test_preds, squared=False)
  print('RMSE Train: ', rmse_train)
  print('RMSE Test: ', rmse_test)

  r2_train = r2_score(y_train, train_preds)
  r2_test = r2_score(y_test, test_preds)
  print('R2 Train: ', r2_train)
  print('R2 Test: ', r2_test)

  mape_train = mape(y_train, train_preds)
  mape_test = mape(y_test, test_preds)
  print('Mape Train: ', mape_train)
  print('Mape Test: ', mape_test)

  explained_variance_train = explained_variance_score(y_train, train_preds)
  explained_variance_test = explained_variance_score(y_test, test_preds)
  print('Explanied Variance Score Train: ', explained_variance_train)
  print('Explanied Variance Score Test: ', explained_variance_test)

  CoV_train = rmse_test/np.mean(y_train)
  CoV_test = rmse_test/np.mean(y_test)
  print('CoV Train: ', CoV_train)
  print('CoV Test: ', CoV_test)

  errorVisualization(test_preds, y_test)
  errorVisualization(train_preds, y_train)

  predVisualization(test_preds,y_test)
  predVisualization(train_preds,y_train)

  return mae_train, mae_test, mse_train, mse_test, rmse_train, rmse_test, r2_train, r2_test, mape_train, mape_test, explained_variance_train, explained_variance_test, CoV_train, CoV_test

mae_train_knn_1, mae_test_knn_1, mse_train_knn_1, mse_test_knn_1, rmse_train_knn_1, rmse_test_knn_1, r2_train_knn_1, r2_test_knn_1, mape_train_knn_1, mape_test_knn_1, explained_variance_train_knn_1, explained_variance_test_knn_1, CoV_train_knn_1, CoV_test_knn_1 = KNN(X_train_1, y_train_1, X_test_1, y_test_1)

mae_train_knn_2, mae_test_knn_2, mse_train_knn_2, mse_test_knn_2, rmse_train_knn_2, rmse_test_knn_2, r2_train_knn_2, r2_test_knn_2, mape_train_knn_2, mape_test_knn_2, explained_variance_train_knn_2, explained_variance_test_knn_2, CoV_train_knn_2, CoV_test_knn_2 = KNN(X_train_2, y_train_2, X_test_2, y_test_2)

mae_train_knn_3, mae_test_knn_3, mse_train_knn_3, mse_test_knn_3, rmse_train_knn_3, rmse_test_knn_3, r2_train_knn_3, r2_test_knn_3, mape_train_knn_3, mape_test_knn_3, explained_variance_train_knn_3, explained_variance_test_knn_3, CoV_train_knn_3, CoV_test_knn_3 = KNN(X_train_3, y_train_3, X_test_3, y_test_3)

mae_train_knn_4, mae_test_knn_4, mse_train_knn_4, mse_test_knn_4, rmse_train_knn_4, rmse_test_knn_4, r2_train_knn_4, r2_test_knn_4, mape_train_knn_4, mape_test_knn_4, explained_variance_train_knn_4, explained_variance_test_knn_4, CoV_train_knn_4, CoV_test_knn_4 = KNN(X_train_4, y_train_4, X_test_4, y_test_4)

tabulated_results_1 = pd.DataFrame({
    'Metrics': ['MAE (Train)' , 'MAE (Test)' , 'MSE (Train)', 'MSE (Test)' ,
              'RMSE (Train)' , 'RMSE (Test)' , 'R2 (Train)', 'R2 (Test)',
              'MAPE (Train)', 'MAPE (Test)', 'ExpVar (Train)', 'ExpVar (Test)', 'CoV (Train)', 'CoV (Test)'],
    'Linear Regression': [mae_train_linreg_1, mae_test_linreg_1, mse_train_linreg_1, mse_test_linreg_1,
            rmse_train_linreg_1,rmse_test_linreg_1, r2_train_linreg_1, r2_test_linreg_1,
            mape_train_linreg_1, mape_test_linreg_1, explained_variance_train_linreg_1, explained_variance_test_linreg_1,
            CoV_train_knn_1, CoV_test_knn_1],
    'XGB': [mae_train_xgb_1, mae_test_xgb_1, mse_train_xgb_1,mse_test_xgb_1,
            rmse_train_xgb_1,rmse_test_xgb_1, r2_train_xgb_1, r2_test_xgb_1,
            mape_train_xgb_1, mape_test_xgb_1, explained_variance__train_xgb_1, explained_variance__test_xgb_1,
            CoV_train_knn_1, CoV_test_knn_1],
    'KNN': [mae_train_knn_1, mae_test_knn_1, mse_train_knn_1, mse_test_knn_1,
            rmse_train_knn_1,rmse_test_knn_1, r2_train_knn_1, r2_test_knn_1,
            mape_train_knn_1, mape_test_knn_1, explained_variance_train_knn_1, explained_variance_test_knn_1,
            CoV_train_knn_1, CoV_test_knn_1],
    'RFR': [mae_train_rfr_1, mae_test_rfr_1, mse_train_rfr_1,mse_test_rfr_1,
            rmse_train_rfr_1,rmse_test_rfr_1, r2_train_rfr_1, r2_test_rfr_1,
            mape_train_rfr_1, mape_test_rfr_1, explained_variance_train_rfr_1, explained_variance_test_rfr_1,
            CoV_train_rfr_1, CoV_test_rfr_1]
            })

tabulated_results_1

tabulated_results_2 = pd.DataFrame({
    'Metrics': ['MAE (Train)' , 'MAE (Test)' , 'MSE (Train)', 'MSE (Test)' ,
              'RMSE (Train)' , 'RMSE (Test)' , 'R2 (Train)', 'R2 (Test)',
              'MAPE (Train)', 'MAPE (Test)', 'ExpVar (Train)', 'ExpVar (Test)', 'CoV (Train)', 'CoV (Test)'],
    'Linear Regression': [mae_train_linreg_2, mae_test_linreg_2, mse_train_linreg_2, mse_test_linreg_2,
            rmse_train_linreg_2, rmse_test_linreg_2, r2_train_linreg_2, r2_test_linreg_2,
            mape_train_linreg_2, mape_test_linreg_2, explained_variance_train_linreg_2, explained_variance_test_linreg_2,
            CoV_train_knn_2, CoV_test_knn_2],
    'XGB': [mae_train_xgb_2, mae_test_xgb_2, mse_train_xgb_2, mse_test_xgb_2,
            rmse_train_xgb_2, rmse_test_xgb_2, r2_train_xgb_2, r2_test_xgb_2,
            mape_train_xgb_2, mape_test_xgb_2, explained_variance__train_xgb_2, explained_variance__test_xgb_2,
            CoV_train_knn_2, CoV_test_knn_2],
    'KNN': [mae_train_knn_2, mae_test_knn_2, mse_train_knn_2, mse_test_knn_2,
            rmse_train_knn_2,rmse_test_knn_2, r2_train_knn_2, r2_test_knn_2,
            mape_train_knn_2, mape_test_knn_2, explained_variance_train_knn_2, explained_variance_test_knn_2,
            CoV_train_knn_2, CoV_test_knn_2],
    'RFR': [mae_train_rfr_2, mae_test_rfr_2, mse_train_rfr_2, mse_test_rfr_2,
            rmse_train_rfr_2, rmse_test_rfr_2, r2_train_rfr_2, r2_test_rfr_2,
            mape_train_rfr_2, mape_test_rfr_2, explained_variance_train_rfr_2, explained_variance_test_rfr_2,
            CoV_train_rfr_2, CoV_test_rfr_2]
            })

tabulated_results_2

tabulated_results_3 = pd.DataFrame({
    'Metrics': ['MAE (Train)' , 'MAE (Test)' , 'MSE (Train)', 'MSE (Test)' ,
              'RMSE (Train)' , 'RMSE (Test)' , 'R2 (Train)', 'R2 (Test)',
              'MAPE (Train)', 'MAPE (Test)', 'ExpVar (Train)', 'ExpVar (Test)', 'CoV (Train)', 'CoV (Test)'],
    'Linear Regression': [mae_train_linreg_3, mae_test_linreg_3, mse_train_linreg_3, mse_test_linreg_3,
            rmse_train_linreg_3, rmse_test_linreg_3, r2_train_linreg_3, r2_test_linreg_3,
            mape_train_linreg_3, mape_test_linreg_3, explained_variance_train_linreg_3, explained_variance_test_linreg_3,
            CoV_train_knn_3, CoV_test_knn_3],
    'XGB': [mae_train_xgb_3, mae_test_xgb_3, mse_train_xgb_3, mse_test_xgb_3,
            rmse_train_xgb_3, rmse_test_xgb_3, r2_train_xgb_3, r2_test_xgb_3,
            mape_train_xgb_3, mape_test_xgb_3, explained_variance__train_xgb_3, explained_variance__test_xgb_3,
            CoV_train_knn_3, CoV_test_knn_3],
    'KNN': [mae_train_knn_3, mae_test_knn_3, mse_train_knn_3, mse_test_knn_3,
            rmse_train_knn_3, rmse_test_knn_3, r2_train_knn_3, r2_test_knn_3,
            mape_train_knn_3, mape_test_knn_3, explained_variance_train_knn_3, explained_variance_test_knn_3,
            CoV_train_knn_3, CoV_test_knn_3],
    'RFR': [mae_train_rfr_3, mae_test_rfr_3, mse_train_rfr_3, mse_test_rfr_3,
            rmse_train_rfr_3, rmse_test_rfr_3, r2_train_rfr_3, r2_test_rfr_3,
            mape_train_rfr_3, mape_test_rfr_3, explained_variance_train_rfr_3, explained_variance_test_rfr_3,
            CoV_train_rfr_3, CoV_test_rfr_3]
            })

tabulated_results_3

tabulated_results_4 = pd.DataFrame({
    'Metrics': ['MAE (Train)' , 'MAE (Test)' , 'MSE (Train)', 'MSE (Test)' ,
              'RMSE (Train)' , 'RMSE (Test)' , 'R2 (Train)', 'R2 (Test)',
              'MAPE (Train)', 'MAPE (Test)', 'ExpVar (Train)', 'ExpVar (Test)', 'CoV (Train)', 'CoV (Test)'],
    'Linear Regression': [mae_train_linreg_4, mae_test_linreg_4, mse_train_linreg_4, mse_test_linreg_4,
            rmse_train_linreg_4, rmse_test_linreg_4, r2_train_linreg_4, r2_test_linreg_4,
            mape_train_linreg_4, mape_test_linreg_4, explained_variance_train_linreg_4, explained_variance_test_linreg_4,
            CoV_train_knn_4, CoV_test_knn_4],
    'XGB': [mae_train_xgb_4, mae_test_xgb_4, mse_train_xgb_4, mse_test_xgb_4,
            rmse_train_xgb_4, rmse_test_xgb_4, r2_train_xgb_4, r2_test_xgb_4,
            mape_train_xgb_4, mape_test_xgb_4, explained_variance__train_xgb_4, explained_variance__test_xgb_4,
            CoV_train_knn_4, CoV_test_knn_4],
    'KNN': [mae_train_knn_4, mae_test_knn_4, mse_train_knn_4, mse_test_knn_4,
            rmse_train_knn_4, rmse_test_knn_4, r2_train_knn_4, r2_test_knn_4,
            mape_train_knn_4, mape_test_knn_4, explained_variance_train_knn_4, explained_variance_test_knn_4,
            CoV_train_knn_4, CoV_test_knn_4],
    'RFR': [mae_train_rfr_4, mae_test_rfr_4, mse_train_rfr_4, mse_test_rfr_4,
            rmse_train_rfr_4, rmse_test_rfr_4, r2_train_rfr_4, r2_test_rfr_4,
            mape_train_rfr_4, mape_test_rfr_4, explained_variance_train_rfr_4, explained_variance_test_rfr_4,
            CoV_train_rfr_4, CoV_test_rfr_4]
            })

tabulated_results_4

rmse_results = pd.DataFrame({
    'Metrics': ['Linear Regression RMSE (Train)' , 'Linear Regression RMSE (Test)', 'XGBoost RMSE (Train)' , 'XGBoost RMSE (Test)',
                'KNN RMSE (Train)' , 'KNN RMSE (Test)', 'Random Forest RMSE (Train)' , 'Random Forest RMSE (Test)'],
    'Dataset 1': [rmse_train_linreg_1, rmse_test_linreg_1, rmse_train_xgb_1, rmse_test_xgb_1,
                  rmse_train_knn_1, rmse_test_knn_1, rmse_train_rfr_1, rmse_test_rfr_1],
    'Dataset 2': [rmse_train_linreg_2, rmse_test_linreg_2, rmse_train_xgb_2, rmse_test_xgb_2,
                  rmse_train_knn_2, rmse_test_knn_2, rmse_train_rfr_2, rmse_test_rfr_2],
    'Dataset 3': [rmse_train_linreg_3, rmse_test_linreg_3, rmse_train_xgb_3, rmse_test_xgb_3,
                  rmse_train_knn_3, rmse_test_knn_3, rmse_train_rfr_3, rmse_test_rfr_3],
    'Dataset 4': [rmse_train_linreg_4, rmse_test_linreg_4, rmse_train_xgb_4, rmse_test_xgb_4,
                  rmse_train_knn_4, rmse_test_knn_4, rmse_train_rfr_4, rmse_test_rfr_4],                  
            })

rmse_results

"""As it can be seen on RMSE Results Table best rsults are calculated with Dataset 3 (with all variables but outlier values) & XGBoost algorithm."""

